
Given a non-empty array nums containing only positive integers, find if the array can be partitioned into two subsets such that the sum of 
elements in both subsets is equal.


Example 1:

Input: nums = [1,5,11,5]
Output: true
Explanation: The array can be partitioned as [1, 5, 5] and [11].
Example 2:

Input: nums = [1,2,3,5]
Output: false
Explanation: The array cannot be partitioned into equal sum subsets.
 
class Solution {
    
    public boolean helper(int[] nums, boolean[][] dp, int item, int sum){
        if(sum == 0) return true;
        if(item > nums.length-1 || sum < 0) return false;
        boolean result;
        if(dp[item][sum] != false) return dp[item][sum];
        else{
            
            if(nums[item] > sum) result = helper(nums, dp, item + 1, sum);
            else{

                result = (helper(nums, dp, item + 1, sum) || 
                       helper(nums, dp, item + 1, sum - nums[item]) );
            }
            dp[item][sum] = result;
        }
        
        return result;
    }
    public boolean canPartition(int[] nums) {
        int sum = 0;
        for(int i = 0; i < nums.length; i++)
            sum += nums[i];
        
        if(sum % 2 != 0) return false;
        
        boolean[][] dp = new boolean[nums.length + 1][sum/2 + 1];
        for(int i = 0; i < dp.length; i++)
            dp[i][0] = true;
        for(int i = 1; i < dp[0].length; i++)
            dp[0][i] = false;
        
        return (helper(nums, dp, 0, sum/2));
        
    }
}
