You are climbing a staircase. It takes n steps to reach the top.
Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

 

Example 1:

Input: n = 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps


class Solution {
    
    public int climbStairsDp(int n){
        int[] dp = new int[n+1];
        dp[0] = 0;
        dp[1] = 1; dp[2] = 2; dp[3] = 3;
        for(int i = 3; i < n+1; i++){
                dp[i] = dp[i-1] + dp[i-2];
        }
        return dp[n];
    }
    public int climbStairs(int n) {
        if(n == 1) return 1;
        else if(n == 2) return 2;
        else if(n == 3) return 3;
        else
            // return(climbStairs(n-1) + climbStairs(n-2));
            return climbStairsDp(n);
    }
}
