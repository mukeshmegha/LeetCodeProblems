Given a string s, find the length of the longest substring without repeating characters.
Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.
Example 4:

Input: s = ""
Output: 0
 

Constraints:

0 <= s.length <= 5 * 104
s consists of English letters, digits, symbols and spaces.



class Solution {

    public int lengthOfLongestSubstring(String s) {
        
        if (s.length() == 1) return 1;
        else if (s.length() == 0) return 0;
        
        int max = 0;
        HashSet<Character> hs = new HashSet();
        // String out = "";
        
        for(int i=0; i<s.length()-1; i++){
            // out = "";
            hs.clear();
            int window = 0;
            int j = i;
            while(j < s.length() && !hs.contains(s.charAt(j))){
                hs.add(s.charAt(j));
                // out = out + (s.charAt(j));
                window++;
                j++;
            }
            // System.out.println(out + "----" + window + "----" + i);
            if(max < window)
                max = window;
        }
        return max;
    }
}
