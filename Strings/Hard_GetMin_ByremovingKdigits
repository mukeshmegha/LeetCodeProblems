Given string num representing a non-negative integer num, and an integer k, return the smallest possible integer after removing k digits from num.

 

Example 1:

Input: num = "1432219", k = 3
Output: "1219"
Explanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.
Example 2:

Input: num = "10200", k = 1
Output: "200"
Explanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.





class Solution {
    public String result = "";
    public void getLowestRec(String num, int k){
        
        if(k == 0){
            result += num;
            return;
        }
        if(k == num.length())
            return;
        
        int len = num.length();
        int min_index = 0;
        for(int i = 1; i <= k; i++){
            if(num.charAt(i) < num.charAt(min_index)){
                min_index = i;
            }
        }
        result += num.charAt(min_index);
        // System.out.println(result +  "  Substring: "+ num + " Kindex: " + k);
        getLowestRec(num.substring(min_index + 1, len), k-min_index);
    }
    
    public String removeKdigits(String num, int k) {
        // int len = num.length() - k;
        getLowestRec(num, k);
        if(result == "") return "0";
        System.out.println(result);
        int res = (Integer.parseInt(result));
        
        return String.valueOf(res);
    }
}
