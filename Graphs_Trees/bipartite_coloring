886. Possible Bipartition
Medium
Given a set of n people (numbered 1, 2, ..., n), we would like to split everyone into two groups of any size.
Each person may dislike some other people, and they should not go into the same group. 
Formally, if dislikes[i] = [a, b], it means it is not allowed to put the people numbered a and b into the same group.
Return true if and only if it is possible to split everyone into two groups in this way.

 

Example 1:

Input: n = 4, dislikes = [[1,2],[1,3],[2,4]]
Output: true
Explanation: group1 [1,4], group2 [2,3]

class Solution {
    
    
    public boolean graphBFS(int[][] dislikes, int n){
        
        //Create the Ajancency List
        Map<Integer, List<Integer>> mp = new HashMap();
        for(int i = 0; i < n; i++){
            mp.put(i+1, new ArrayList<Integer>());
        }
        for(int i = 0; i < dislikes.length; i++){
            mp.get(dislikes[i][0]).add(dislikes[i][1]);
        }
        int[] color = new int[n];
        Arrays.fill(color,-1);
        Queue<Integer> dq = new LinkedList();
        
        for(int key : mp.keySet()){
            if(color[key-1] != -1) continue;
            dq.add(key);
            color[key-1] = 1;
            while(!dq.isEmpty()){
                int curr = dq.poll();
                int curr_color = color[curr-1];
                for(int node : mp.get(curr)){
                    //if not visited put in queue and color the opp of current color
                    if(color[node-1] == -1){
                        color[node-1] = 1 - curr_color;
                        dq.add(node);
                    }
                    //if ambiguity return false
                    if(color[node-1] == curr_color) 
                        return false;
                }
            }
            
        }
       return true; 
    }
    
    public boolean possibleBipartition(int n, int[][] dislikes) {
       return graphBFS(dislikes, n);
       
    }
}
