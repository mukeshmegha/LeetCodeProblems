import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Stack;

// import Graph.Node;

public class DFSGraph<T> {

    public void DFS(Graph<T> g){
        System.out.println("vertices: "+ g.getVertices());

        Map<T, Boolean> visited = new HashMap<T, Boolean> (g.getVertices());
        for(T key : g.getGraph().keySet())
            visited.put(key, false);

        System.out.println("Printing DFS for the graph: ");
        for(T key : g.getGraph().keySet())
            if(visited.get(key) == false)
                helperDFS(g, key, visited);

    }
    public void helperDFS(Graph<T> g, T vertex, Map<T, Boolean> visited){
        Stack<T> st = new Stack<T>();
        st.push(vertex);
        visited.put(vertex, true);
        
        while(!st.isEmpty()){
            System.out.print(st.peek() + " ");
            ArrayList<Graph<T>.Node> adj_nodes = g.getGraph().get(st.pop());
            for(Graph<T>.Node node : adj_nodes){
                if(!visited.get(node.destination)){
                    st.push(node.destination);
                    visited.put(node.destination, true);
                }
            }
        }
    }

    public void DFSRecursive(Graph<T> g, Map<T, Boolean> visited, T key){
        if(visited.get(key)) return;
        System.out.print(key + " ");
        visited.put(key, true);
        ArrayList<Graph<T>.Node> adj_nodes = g.getGraph().get(key);
        for(Graph<T>.Node node : adj_nodes){
            if(!visited.get(node.destination))
                DFSRecursive(g, visited, node.destination);
        }
        return;
    }


    public static void main(String[] args){
        Graph<Character> graph = new Graph<Character>();
        graph.addEdge(new Edge<Character>('A','B',5));
        graph.addEdge(new Edge<Character>('A','C',4));
        graph.addEdge(new Edge<Character>('B','C',1));
        graph.addEdge(new Edge<Character>('C','D',2));
        graph.addEdge(new Edge<Character>('B','D',7));
        graph.addEdge(new Edge<Character>('E','D',7));
        graph.addEdge(new Edge<Character>('F','G',7));
        System.out.println("Graph Implemented");
        graph.printGraph();
        DFSGraph<Character> obj = new DFSGraph<Character>();
        obj.DFS(graph);

        Map<Character, Boolean> visited = new HashMap<Character, Boolean> (graph.getVertices());
        for(Character key : graph.getGraph().keySet())
            visited.put(key, false);
        System.out.println("Printing DFS Recursive for the graph: ");
        obj.DFSRecursive(graph, visited, 'A');
    }
}
