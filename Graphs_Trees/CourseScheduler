207. Course Schedule

There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.

For example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.
Return true if you can finish all courses. Otherwise, return false.

 

Example 1:

Input: numCourses = 2, prerequisites = [[1,0]]
Output: true
Explanation: There are a total of 2 courses to take. 
To take course 1 you should have finished course 0. So it is possible.


class Solution {
    
    public boolean helper(Map<Integer, ArrayList<Integer>> mp, int[] visited, int curr){
        if(visited[curr] == 1) return true;
        visited[curr] = 1;
        if(mp.containsKey(curr)){
            for(int key : mp.get(curr)){
                if(visited[key] == 2) continue;
                if(visited[key] == 1) return true;
                helper(mp, visited, key);
            }
        }
        
        visited[curr] = 2;
        return false;
    }
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        
        Map<Integer, ArrayList<Integer>> mp = new HashMap<>();
        int[] visited = new int[numCourses];
        Arrays.fill(visited, 0);
        
        for(int i = 0; i < prerequisites.length; i++)
            mp.put(prerequisites[i][0], new ArrayList<Integer>());
        for(int i = 0; i < prerequisites.length; i++)
            mp.get(prerequisites[i][0]).add(prerequisites[i][1]);
        
        for(int key : mp.keySet()){
            if(visited[key] == 0)
                if(helper(mp, visited, key)) return false;
        }
        
        return true;
    }
}
