Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

Example 1:

Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.


class Solution {
    // public int util(int win, int[] arr){
    //     int max = Integer.MIN_VALUE;
    //     int sum;
    //     for(int i = 0; i <= arr.length - win; i++){
    //         sum = 0;
    //         for(int j = i; j < i+win; j++){
    //             sum += arr[j];
    //         }
    //         max = Math.max(max, sum);
    //     }
    //     System.out.println("Max: "+ max + " For Window: "+ win);
    //     return max;
    // }
    
    public int maxSubArray(int[] nums) {
        int n = nums.length;
        if(n == 0) return 0;
        if(n == 1) return nums[0];
        int max_sum = nums[0];
        int sum = nums[0];
        
        for(int i = 1; i < n; i++){
            sum = Math.max(nums[i], sum + nums[i]);
            max_sum = Math.max(max_sum, sum);
        }
        return max_sum;
    }
}
